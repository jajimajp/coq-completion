(* --
Memo: This example raises error at 95.

1: e2e_tests.GRP075_1.inverse(X0) <- e2e_tests.GRP075_1.double_divide(X0, e2e_tests.GRP075_1.identity()).
Proof: Axiom.

79: e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.identity(), X5), X5) -> e2e_tests.GRP075_1.identity().
Proof: A critical pair between equations 64 and 63 with superposition e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.double_divide(X5, e2e_tests.GRP075_1.identity()), X5).

84: e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.identity(), e2e_tests.GRP075_1.identity()) <- e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.identity(), X5), X5).
Proof: A critical pair between equations 78 and 72 with superposition e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.identity(), e2e_tests.GRP075_1.double_divide(e2e_tests.GRP075_1.identity(), e2e_tests.GRP075_1.double_divide(X5, e2e_tests.GRP075_1.identity()))), X5).


95: e2e_tests.GRP075_1.inverse(e2e_tests.GRP075_1.identity()) -> e2e_tests.GRP075_1.identity().
Proof: Rewrite equation 84,
               lhs with equations [1]
               rhs with equations [79].

1: i (X0) <- double_divide (X0, e)
79: double_divide (double_divide (e, X5), X5) -> e
84: double_divide (e, e) <- double_divide (double_divide (e, X5), X5)
95: i (e) -> e
-- *)
Declare ML Module "coq-completion.plugin".

(* Generated by tptp2coqp *)
Require Import Setoid.

(* axioms *)
Parameter G : Set.
Parameter a1 : G.
Parameter a2 : G.
Parameter a3 : G.
Parameter b3 : G.
Parameter c3 : G.
Parameter double_divide : G -> G -> G.
Parameter identity : G.
Parameter inverse : G -> G.
Parameter multiply : G -> G -> G.
Axiom ax_identity : forall X : G, identity = (double_divide X (inverse X)).
Axiom ax_inverse : forall X : G, (inverse X) = (double_divide X identity).
Axiom ax_multiply : forall X Y : G, (multiply X Y) = (double_divide (double_divide Y X) identity).
Axiom ax_single_axiom : forall U X Y Z : G, (double_divide (double_divide (double_divide X (double_divide Y identity)) (double_divide (double_divide Z (double_divide U (double_divide U identity))) (double_divide X identity))) Y) = Z.

Complete ax_identity ax_inverse ax_multiply ax_single_axiom : a1 a2 a3 b3 c3 double_divide identity inverse multiply : hint
  for ((multiply (inverse a1) a1) = identity).

(* Goal *)
Theorem check : (multiply (inverse a1) a1) = identity.
Proof.
  lpo_autorewrite with hint.
  reflexivity.
Qed.

Check check.
