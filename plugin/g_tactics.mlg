DECLARE PLUGIN "coq-completion.plugin"

{
open Ltac_plugin
open Stdarg
}

VERNAC COMMAND EXTEND Complete CLASSIFIED AS QUERY
| [ "Interreduce" ident(name) ":=" constr(e) "by" ident(a) "using" ident_list(rs)] -> {
    let rs = List.map Names.Id.to_string rs in
    let a = Names.Id.to_string a in
    let rewriters = List.map Libnames.qualid_of_string rs in
    let applier = Libnames.qualid_of_string a in
    let () = Main.prove_interreduce ~name ~goal:e ~rewriters ~applier in
    Feedback.msg_notice @@ Pp.str "P"
}
| [ "Complete" reference_list(axioms) ":" reference_list(ops) ":" ident(hint) ] -> {
  let hint_db_name = Names.Id.to_string hint in
  let _ = Main.complete axioms hint_db_name ops in
  Feedback.msg_notice @@ Pp.str "Finish"
}
| [ "Complete" reference_list(axioms) ":" reference_list(ops) ":" ident(hint) "for" constr(e) ] -> {
  let hint_db_name = Names.Id.to_string hint in
  let _ = Main.complete_for e axioms hint_db_name ops in
  Feedback.msg_notice @@ Pp.str "Finish"
}
END

TACTIC EXTEND print_term
| [ "print_term" constr(e) ] -> {
  Main.print_term e
}
END

TACTIC EXTEND complete
| [ "complete" preident_list(axioms) ":" preident_list(constants) clause(cl) ] -> {
  Main.complete_in_tac axioms constants cl
}
END

TACTIC EXTEND lpo_rewrite
| [ "lpo_autorewrite" "with" preident(hint) clause(cl) ] -> {
  Main.lpo_autorewrite_with hint cl
}
END

TACTIC EXTEND compl_auto
| [ "compl_auto" preident_list(fixpoints) ] -> {
  Main.compl_auto fixpoints
}
END
